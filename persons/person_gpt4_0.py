from __future__ import annotations

import os
import openai
from dotenv import load_dotenv
load_dotenv()

from typing import Dict, List

from persons.person import Person
from session_rooms.session_room import System
from session_rooms.ChatEntry import ChatEntry

class Person4_0(Person):
    PERSON_TYPE = "person_gpt4_0"
    MODEL_NAME = "gpt-4o"

    def __init__(self, background_story: str, name: str, *args, **kwargs):
        super().__init__(background_story, name)
        # Set up your OpenAI API credentials
        openai.api_key = os.environ.get("OPENAI_API_KEY")
        self.model_name = Person4_0.MODEL_NAME

    def generate_answer(self, experiment_scenario: str, chat_list: List[ChatEntry]):
        """
        Generate GPT-4 response as an echo chamber: Return the entire chat history as the answer.
        """
        # Prepare the full chat history as a single string
        echo_message = "\n".join(
            [f"{entry.entity.name}: {entry.answer}" for entry in chat_list]
        ) or "The conversation history is empty."

        print("\n\n\n")
        print(f"\033[93mDEBUG: Echo Message Content Sent to GPT-4:\n{echo_message}\033[0m")  # Yellow text

        # Create a simple prompt for GPT-4 to echo the conversation
        generated_prompt = [
            {
                "role": "system",
                "content": (
                    "You are GPT-4, a highly advanced language model. Your task is to echo the conversation history "
                    "exactly as it is provided, including participant names and responses. Do not add headers such as "
                    "'Conversation so far:' or modify the format in any way. Just echo the text verbatim."
                )
            },
            {
                "role": "user",
                "content": f"{echo_message}"
            }
        ]

        # Call OpenAI's API to generate a response
        try:
            full_response = openai.ChatCompletion.create(
                model=self.model_name,
                messages=generated_prompt,
                max_tokens=200,
                n=1,
                temperature=0.0,  # Make the response deterministic
            )
            # Retrieve the generated response
            output_text: str = full_response.choices[0].message['content']
            return ChatEntry(entity=self, prompt=generated_prompt, answer=output_text)
        except openai.error.OpenAIError as e:
            print(f"OpenAI API Error: {e}")
            return ChatEntry(entity=self, prompt=generated_prompt, answer="Error: Unable to generate response.")

    def create_prompt(self, experiment_scenario: str,
                      chat_list: List[ChatEntry]) -> List[Dict[str, str]]:
        """
        Creates a prompt with the past conversation in the format expected by OpenAI Chat API.
        The returned conversation is a list of entries, which follows the format described at
        https://help.openai.com/en/articles/7042661-chatgpt-api-transition-guide.

        In particular, the "role" property has 3 values, which we use as follows:
            - "system": Only used in the first / last entries to set up the person instance identity.
            - "assistant": Used for messages generated by the person instance.
            - "user": Used for messages generated by other persons. Each entry can consist of
              messages from multiple persons, by concatenating the format "{name}: {content}\n".
        """

        # Define system messages
        name_message = {"role": "system", "content": f"Your name is {self.name}."}
        scenario_message = {"role": "system", "content": f"The scenario is the following:"
                                                         f" {experiment_scenario}"}
        system_message = {"role": "system", "content": f"This is your background story:"
                                                       f" {self.background_story}"}
        conversation = [name_message, scenario_message, system_message]

        # Prepare chat conversation history
        other_users_prompt = ""
        for chat_entry in chat_list:
            if isinstance(chat_entry.entity, System):  # System message
                if other_users_prompt:
                    conversation.append({"role": "user", "content": other_users_prompt})
                conversation.append({"role": "system", "content": chat_entry.answer})
                other_users_prompt = ""
            elif chat_entry.entity is self:  # My previous message
                if other_users_prompt:
                    conversation.append({"role": "user", "content": other_users_prompt})
                conversation.append({"role": "assistant", "content": chat_entry.answer})
                other_users_prompt = ""
            else:  # Other user message
                if other_users_prompt:
                    other_users_prompt += "\n"
                other_users_prompt += f"{chat_entry.entity.name}: {chat_entry.answer}"

        if other_users_prompt:
            conversation.append({"role": "user", "content": other_users_prompt})

        # Include refined context for GPT-4
        conversation.append({
            "role": "system",
            "content": "You are GPT-4, a highly advanced language model with superior reasoning abilities. Provide responses considering the entire conversation context."
        })

        return conversation
